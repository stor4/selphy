(function() {
  function createDropdown(element, settings) {
      const dropdown = {
          selectedIndex: -1,
          selectedItem: null,
          selectedData: null,
          settings: Object.assign({
              data: [],
              width: 260,
              height: null,
              background: "#eee",
              selectText: "",
              defaultSelectedIndex: null,
              truncateDescription: true,
              imagePosition: "left",
              showSelectedHTML: true,
              onSelected: function() {}
          }, settings),
          original: element
      };

      initDropdown(element, dropdown);
      element.ddslick = dropdown;
  }

  function initDropdown(element, dropdown) {
      const { settings } = dropdown;

      element.classList.add("dd-container");
      element.style.width = `${settings.width}px`;

      const select = document.createElement("div");
      select.className = "dd-select";
      select.style.width = `${settings.width}px`;
      select.style.background = settings.background;

      const selected = document.createElement("a");
      selected.className = "dd-selected";
      select.appendChild(selected);

      const selectedValue = document.createElement("input");
      selectedValue.type = "hidden";
      selectedValue.className = "dd-selected-value";
      select.appendChild(selectedValue);

      const pointer = document.createElement("span");
      pointer.className = "dd-pointer dd-pointer-down";
      select.appendChild(pointer);

      element.appendChild(select);

      const optionsList = document.createElement("ul");
      optionsList.className = "dd-options";
      optionsList.style.width = `${settings.width}px`;
      if (settings.height) {
          optionsList.style.height = `${settings.height}px`;
          optionsList.style.overflow = "auto";
      }
      element.appendChild(optionsList);

      renderOptions(settings, optionsList, dropdown);

      if (settings.selectText.length > 0 && settings.defaultSelectedIndex == null) {
          selected.innerHTML = settings.selectText;
      } else {
          const initialIndex = settings.defaultSelectedIndex !== null ? settings.defaultSelectedIndex : 0;
          selectOption(element, initialIndex, dropdown);
      }

      // Add event listeners
      select.addEventListener("click", function() {
          toggleDropdown(element);
      });

      optionsList.addEventListener("click", function(event) {
          const index = Array.from(optionsList.children).indexOf(event.target.closest('li'));
          selectOption(element, index, dropdown);
      });

      document.addEventListener("click", function(e) {
          if (!element.contains(e.target)) {
              closeDropdown(element);
          }
      });
  }

  function renderOptions(settings, optionsList, dropdown) {
      optionsList.innerHTML = '';
      settings.data.forEach((item, index) => {
          const optionItem = document.createElement("li");
          const optionLink = document.createElement("a");
          optionLink.className = "dd-option";

          if (item.imageSrc) {
              const img = document.createElement("img");
              img.className = `dd-option-image${settings.imagePosition === "right" ? " dd-image-right" : ""}`;
              img.src = item.imageSrc;
              optionLink.appendChild(img);
          }

          if (item.text) {
              const textLabel = document.createElement("label");
              textLabel.className = "dd-option-text";
              textLabel.textContent = item.text;
              optionLink.appendChild(textLabel);
          }

          if (item.description) {
              const description = document.createElement("small");
              description.className = `dd-option-description dd-desc${settings.truncateDescription ? " dd-selected-description-truncated" : ""}`;
              description.textContent = item.description;
              optionLink.appendChild(description);
          }

          optionItem.appendChild(optionLink);
          optionsList.appendChild(optionItem);

          if (item.selected) {
              settings.defaultSelectedIndex = index;
          }
      });
  }

  function toggleDropdown(element) {
      const optionsList = element.querySelector(".dd-options");
      const pointer = element.querySelector(".dd-pointer");

      if (optionsList.style.display === "block") {
          closeDropdown(element);
      } else {
          optionsList.style.display = "block";
          pointer.classList.add("dd-pointer-up");
      }
  }

  function closeDropdown(element) {
      const optionsList = element.querySelector(".dd-options");
      const pointer = element.querySelector(".dd-pointer");

      optionsList.style.display = "none";
      pointer.classList.remove("dd-pointer-up");
  }

  function selectOption(element, index, dropdown) {
      const { settings } = dropdown;
      const optionsList = element.querySelector(".dd-options");
      const selected = element.querySelector(".dd-selected");
      const selectedValue = element.querySelector(".dd-selected-value");
      const optionItems = optionsList.querySelectorAll("li");

      if (index < 0 || index >= settings.data.length) return;

      const selectedData = settings.data[index];
      dropdown.selectedIndex = index;
      dropdown.selectedItem = optionItems[index];
      dropdown.selectedData = selectedData;

      optionItems.forEach((item) => item.querySelector(".dd-option").classList.remove("dd-option-selected"));
      optionItems[index].querySelector(".dd-option").classList.add("dd-option-selected");

      if (settings.showSelectedHTML) {
          selected.innerHTML = (selectedData.imageSrc ? `<img class="dd-selected-image" src="${selectedData.imageSrc}" />` : "") +
                               (selectedData.text ? `<label class="dd-selected-text">${selectedData.text}</label>` : "") +
                               (selectedData.description ? `<small class="dd-selected-description dd-desc">${selectedData.description}</small>` : "");
      } else {
          selected.textContent = selectedData.text;
      }

      selectedValue.value = selectedData.value;

      closeDropdown(element);

      if (typeof settings.onSelected === "function") {
          settings.onSelected.call(element, dropdown);
      }
  }

  window.ddslick = function(elements, options) {
      elements.forEach(element => createDropdown(element, options));
  };
})();


function selectOption(element, index, dropdown) {
  const { settings } = dropdown;
  const optionsList = element.querySelector(".dd-options");
  const selected = element.querySelector(".dd-selected");
  const selectedValue = element.querySelector(".dd-selected-value");
  const optionItems = optionsList.querySelectorAll("li");

  if (index < 0 || index >= settings.data.length) return; // Ensure index is valid

  const selectedData = settings.data[index];
  dropdown.selectedIndex = index;
  dropdown.selectedItem = optionItems[index];
  dropdown.selectedData = selectedData;

  optionItems.forEach((item) => item.querySelector(".dd-option").classList.remove("dd-option-selected"));
  optionItems[index].querySelector(".dd-option").classList.add("dd-option-selected");

  if (settings.showSelectedHTML) {
      selected.innerHTML = (selectedData.imageSrc ? `<img class="dd-selected-image" src="${selectedData.imageSrc}" />` : "") +
                           (selectedData.text ? `<label class="dd-selected-text">${selectedData.text}</label>` : "") +
                           (selectedData.description ? `<small class="dd-selected-description dd-desc">${selectedData.description}</small>` : "");
  } else {
      selected.textContent = selectedData.text;
  }

  selectedValue.value = selectedData.value;

  closeDropdown(element);

  if (typeof settings.onSelected === "function") {
      settings.onSelected.call(element, dropdown);
  }
}
