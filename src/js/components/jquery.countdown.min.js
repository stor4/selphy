(function() {
  'use strict';

  function parseDate(date) {
      if (date instanceof Date) return date;
      if (String(date).match(/^[0-9]*$/)) return new Date(Number(date));
      if (String(date).match(/\-/)) return new Date(String(date).replace(/\-/g, '/'));
      throw new Error("Couldn't cast `" + date + "` to a date object.");
  }

  function strftime(offset) {
      return function(format) {
          var matches = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
          if (matches) {
              for (var i = 0; i < matches.length; ++i) {
                  var match = matches[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),
                      modifier = match[1] || '',
                      key = match[2],
                      formatFunction = formatMapping[key],
                      value = offset[formatFunction];

                  if (value !== null) {
                      if ('!' === modifier) value = pluralize(match[3] || '', value);
                      if ('' === modifier && value < 10) value = '0' + value;
                      format = format.replace(new RegExp(match[0]), value);
                  }
              }
          }
          return format.replace(/%%/g, '%');
      };
  }

  function pluralize(format, value) {
      var singular = 's', plural = '';
      if (format) {
          var parts = format.replace(/(:|;|\s)/gi, '').split(',');
          if (parts.length === 1) singular = parts[0];
          else { plural = parts[0]; singular = parts[1]; }
      }
      return Math.abs(value) === 1 ? singular : plural;
  }

  var formatMapping = {
      Y: 'years',
      m: 'months',
      w: 'weeks',
      d: 'days',
      D: 'totalDays',
      H: 'hours',
      M: 'minutes',
      S: 'seconds'
  };

  var Countdown = function(el, finalDate, callback) {
      this.el = el;
      this.finalDate = parseDate(finalDate);
      this.offset = {};
      this.interval = null;

      if (callback) {
          el.addEventListener('countdownUpdate', callback);
          el.addEventListener('countdownFinished', callback);
      }

      this.start();
  };

  Countdown.prototype.start = function() {
      var self = this;
      this.update();
      this.interval = setInterval(function() {
          self.update();
      }, 1000);
  };

  Countdown.prototype.stop = function() {
      clearInterval(this.interval);
      this.interval = null;
  };

  Countdown.prototype.update = function() {
      var currentTime = new Date().getTime();
      var remainingTime = Math.max(0, Math.ceil((this.finalDate.getTime() - currentTime) / 1000));

      this.offset = {
          seconds: remainingTime % 60,
          minutes: Math.floor(remainingTime / 60) % 60,
          hours: Math.floor(remainingTime / 3600) % 24,
          days: Math.floor(remainingTime / 86400) % 7,
          totalDays: Math.floor(remainingTime / 86400),
          weeks: Math.floor(remainingTime / (86400 * 7)),
          months: Math.floor(remainingTime / (86400 * 30)),
          years: Math.floor(remainingTime / (86400 * 365))
      };

      if (remainingTime === 0) {
          this.stop();
          this.dispatch('countdownFinished');
      } else {
          this.dispatch('countdownUpdate');
      }
  };

  Countdown.prototype.dispatch = function(eventType) {
      var event = new CustomEvent(eventType, {
          detail: {
              finalDate: this.finalDate,
              offset: this.offset,
              strftime: strftime(this.offset)
          }
      });
      this.el.dispatchEvent(event);
  };

  Countdown.prototype.setFinalDate = function(finalDate) {
      this.finalDate = parseDate(finalDate);
  };

  // Utility to initialize multiple countdown elements
  function initCountdown(elements, finalDate, callback) {
      elements.forEach(function(el) {
          var countdownInstance = new Countdown(el, finalDate, callback);
          el.countdownInstance = countdownInstance;
      });
  }

  // Assign to global namespace
  window.Countdown = initCountdown;
})();
