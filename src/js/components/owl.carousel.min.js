class OwlCarousel {
  constructor(selector, options = {}) {
    this.carousel = document.querySelector(selector);
    this.settings = Object.assign({
      items: 3,
      loop: false,
      autoplay: false,
      autoplayTimeout: 5000,
      autoplayHoverPause: false,
      mouseDrag: true,
      touchDrag: true,
      lazyLoad: false,
      video: false,
      nav: false,
      navText: ['<', '>'],
      dots: false,
      responsive: {},
    }, options);

    this.items = Array.from(this.carousel.children);
    this.stage = null;
    this.currentIndex = 0;
    this.currentTranslate = 0;
    this.prevTranslate = 0;
    this.dragging = false;
    this.autoplayInterval = null;
    this.startPos = 0;
    this.isTransitioning = false;

    this.init();
  }

  init() {
    this.setupStage();
    this.setupItems();
    this.setupEvents();
    this.setupAutoplay();
    this.setupNavigation();
    this.setupDots();
    this.updateResponsive();
  }

  setupStage() {
    this.stage = document.createElement('div');
    this.stage.classList.add('owl-stage');
    this.stage.style.display = 'flex';
    this.stage.style.transition = 'transform 0.3s ease';

    this.items.forEach(item => {
      item.style.flex = `0 0 ${100 / this.settings.items}%`;
      this.stage.appendChild(item);
    });

    this.carousel.innerHTML = '';
    this.carousel.appendChild(this.stage);
  }

  setupItems() {
    this.items.forEach((item, index) => {
      item.setAttribute('data-index', index);
      if (this.settings.lazyLoad) {
        this.lazyLoadImage(item);
      }
    });
  }

  lazyLoadImage(item) {
    const img = item.querySelector('img[data-src]');
    if (img) {
      img.src = img.dataset.src;
      img.removeAttribute('data-src');
    }
  }

  setupEvents() {
    if (this.settings.mouseDrag) {
      this.stage.addEventListener('mousedown', (e) => this.startDrag(e));
      document.addEventListener('mousemove', (e) => this.drag(e));
      document.addEventListener('mouseup', (e) => this.endDrag(e));
    }

    if (this.settings.touchDrag) {
      this.stage.addEventListener('touchstart', (e) => this.startDrag(e.touches[0]));
      document.addEventListener('touchmove', (e) => this.drag(e.touches[0]));
      document.addEventListener('touchend', (e) => this.endDrag(e));
    }

    window.addEventListener('resize', () => this.updateResponsive());
  }

  startDrag(e) {
    this.dragging = true;
    this.startPos = e.pageX;
    this.stage.style.transition = 'none';
  }

  drag(e) {
    if (!this.dragging) return;
    const currentPos = e.pageX;
    const moveAmount = currentPos - this.startPos;
    this.stage.style.transform = `translateX(${this.currentTranslate + moveAmount}px)`;
  }

  endDrag(e) {
    if (!this.dragging) return;
    this.dragging = false;
    const currentPos = e.pageX;
    const moveAmount = currentPos - this.startPos;
    this.prevTranslate = this.currentTranslate;
    this.currentTranslate += moveAmount;
    this.snapToClosest();
  }

  snapToClosest() {
    const itemWidth = this.carousel.offsetWidth / this.settings.items;
    const index = Math.round(-this.currentTranslate / itemWidth);
    this.goTo(index);
  }

  goTo(index) {
    if (index < 0) {
      index = this.settings.loop ? this.totalItems - 1 : 0;
    }
    if (index >= this.totalItems) {
      index = this.settings.loop ? 0 : this.totalItems - 1;
    }

    this.currentIndex = index;
    const offset = -index * (this.carousel.offsetWidth / this.settings.items);
    this.stage.style.transition = 'transform 0.3s ease';
    this.stage.style.transform = `translateX(${offset}px)`;
    this.currentTranslate = offset;
  }

  setupAutoplay() {
    if (this.settings.autoplay) {
      this.startAutoplay();

      if (this.settings.autoplayHoverPause) {
        this.carousel.addEventListener('mouseenter', () => this.stopAutoplay());
        this.carousel.addEventListener('mouseleave', () => this.startAutoplay());
      }
    }
  }

  startAutoplay() {
    this.autoplayInterval = setInterval(() => {
      this.goTo(this.currentIndex + 1);
    }, this.settings.autoplayTimeout);
  }

  stopAutoplay() {
    clearInterval(this.autoplayInterval);
  }

  setupNavigation() {
    if (this.settings.nav) {
      const prevButton = document.createElement('button');
      prevButton.innerHTML = this.settings.navText[0];
      prevButton.classList.add('owl-prev');
      prevButton.addEventListener('click', () => this.goTo(this.currentIndex - 1));

      const nextButton = document.createElement('button');
      nextButton.innerHTML = this.settings.navText[1];
      nextButton.classList.add('owl-next');
      nextButton.addEventListener('click', () => this.goTo(this.currentIndex + 1));

      this.carousel.appendChild(prevButton);
      this.carousel.appendChild(nextButton);
    }
  }

  setupDots() {
    if (this.settings.dots) {
      const dotsWrapper = document.createElement('div');
      dotsWrapper.classList.add('owl-dots');

      this.items.forEach((item, index) => {
        const dot = document.createElement('button');
        dot.classList.add('owl-dot');
        dot.addEventListener('click', () => this.goTo(index));
        dotsWrapper.appendChild(dot);
      });

      this.carousel.appendChild(dotsWrapper);
    }
  }

  updateResponsive() {
    const width = window.innerWidth;
    let items = this.settings.items;

    for (const breakpoint in this.settings.responsive) {
      if (width <= breakpoint) {
        items = this.settings.responsive[breakpoint].items;
        break;
      }
    }

    this.settings.items = items;
    this.items.forEach(item => {
      item.style.flex = `0 0 ${100 / items}%`;
    });

    this.goTo(this.currentIndex);
  }
}

window.OwlCarousel = OwlCarousel
