(function () {
  'use strict';

  // SimpleLens function
  function simpleLens(options) {
    const defaults = {
      anchorParentClass: '.simpleLens-lens-image',
      lensImageAttr: 'data-lens-image',
      bigImageClass: '.simpleLens-big-image',
      parentClass: '.simpleLens-big-image-container',
      lensClass: 'simpleLens-lens-element',
      cursorClass: 'simpleLens-mouse-cursor',
      loadingImage: 'images/loading.gif',
      openLensEvent: 'mouseenter'
    };

    const settings = Object.assign({}, defaults, options);

    const h = {
      init(image) {
        this.height = image.offsetHeight;
        this.width = image.offsetWidth;
        this.offset = image.getBoundingClientRect();
        this.calcImageLimits();
      },
      calcImageLimits() {
        this.limits = {
          xLeft: this.offset.left,
          xRight: this.offset.left + this.width,
          yTop: this.offset.top,
          yBottom: this.offset.top + this.height
        };
      },
      calcViewPosition(event) {
        return {
          orgX: event.pageX - this.offset.left,
          orgY: event.pageY - this.offset.top
        };
      }
    };

    const e = {
      init(parentAnchor, lensContainer, ratio, position) {
        this.parentAnchor = parentAnchor;
        this.lensContainer = lensContainer;
        this.ratio = ratio;
        this.cursorPosition = { top: 0, left: 0 };
        this.calcCursorSize();
        this.insertCursor(position.orgX, position.orgY);
      },
      destroy() {
        const cursor = document.querySelector(`.${settings.cursorClass}`);
        if (cursor) {
          cursor.remove();
        }
      },
      calcCursorSize() {
        this.cursorHeight = this.lensContainer.offsetHeight / this.ratio.y;
        this.cursorWidth = this.lensContainer.offsetWidth / this.ratio.x;
        this.heightCenter = this.cursorHeight / 2;
        this.widthCenter = this.cursorWidth / 2;
      },
      updateCursorPosition(x, y) {
        let top = y - this.heightCenter;
        let bottom = y + this.heightCenter;
        let left = x - this.widthCenter;
        let right = x + this.widthCenter;

        const limits = h.limits;

        if (top < limits.yTop) top = limits.yTop;
        if (bottom > limits.yBottom) top = limits.yBottom - this.cursorHeight;
        if (left < limits.xLeft) left = limits.xLeft;
        if (right > limits.xRight) left = limits.xRight - this.cursorWidth;

        this.cursorPosition = {
          top: top,
          left: left,
          centerTop: top + this.heightCenter,
          centerLeft: left + this.widthCenter
        };

        if (this.cursor) {
          this.cursor.style.top = `${this.cursorPosition.top}px`;
          this.cursor.style.left = `${this.cursorPosition.left}px`;
        }
      },
      insertCursor(x, y) {
        this.cursor = document.createElement('div');
        this.cursor.className = settings.cursorClass;
        this.cursor.style.height = `${this.cursorHeight}px`;
        this.cursor.style.width = `${this.cursorWidth}px`;
        this.parentAnchor.appendChild(this.cursor);
        this.updateCursorPosition(x, y);
      }
    };

    const k = {
      init(anchor) {
        this.parentAnchor = anchor;
        this.parentDiv = anchor.closest(settings.parentClass);
        this.lensImageUrl = anchor.getAttribute(settings.lensImageAttr);
        this.lensContainer = document.createElement('div');
        this.lensContainer.className = settings.lensClass;
        this.lensImage = new Image();
        h.init(anchor.querySelector(settings.bigImageClass));

        if (!this.lensImageUrl) {
          console.warn("Cannot find lens image. URL:", this.lensImageUrl);
        }
      },
      updateLensPosition(position) {
        this.lensImage.style.top = `${position.top}px`;
        this.lensImage.style.left = `${position.left}px`;
      },
      calcLensPosition(cursorPosition) {
        return {
          left: -1 * (cursorPosition.centerLeft * this.ratio.x - this.container.width),
          top: -1 * (cursorPosition.centerTop * this.ratio.y - this.container.height)
        };
      },
      lensEventBind() {
        this.parentAnchor.addEventListener('mousemove', (event) => {
          const position = h.calcViewPosition(event);
          e.updateCursorPosition(position.orgX, position.orgY);
          this.updateLensPosition(this.calcLensPosition(e.cursorPosition));
        });
      },
      lensEventUnbind() {
        this.parentAnchor.removeEventListener('mousemove', this.mouseMoveHandler);
      },
      destroy() {
        e.destroy();
        const lensElement = document.querySelector(`.${settings.lensClass}`);
        if (lensElement) lensElement.remove();
        this.lensEventUnbind();
      },
      load(event) {
        const loadingImage = document.createElement('img');
        loadingImage.src = settings.loadingImage;
        loadingImage.style.marginTop = `${(this.lensContainer.offsetHeight / 2) - 25}px`;
        this.lensContainer.appendChild(loadingImage);
        this.parentDiv.appendChild(this.lensContainer);

        this.lensImage.onload = () => {
          this.lensContainer.innerHTML = '';
          this.lensContainer.appendChild(this.lensImage);
          this.container = {
            width: this.lensContainer.offsetWidth / 2,
            height: this.lensContainer.offsetHeight / 2
          };
          this.imgSize = {
            width: this.lensImage.width,
            height: this.lensImage.height
          };
          this.ratio = {
            y: this.lensImage.height / h.height,
            x: this.lensImage.width / h.width
          };

          const position = h.calcViewPosition(event);
          e.init(this.parentAnchor, this.lensContainer, this.ratio, position);
          this.updateLensPosition(this.calcLensPosition(e.cursorPosition));
          this.lensEventBind();
        };

        this.lensImage.src = this.lensImageUrl;
      }
    };

    const anchors = document.querySelectorAll(`${settings.parentClass} ${settings.anchorParentClass}`);
    anchors.forEach(anchor => {
      anchor.addEventListener(settings.openLensEvent, function (event) {
        k.init(anchor);
        k.load(event);
      });

      anchor.addEventListener('mouseleave', function () {
        k.destroy();
      });
    });
  }

  window.simpleLens = simpleLens;

})();
