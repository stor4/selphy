(function () {
  'use strict';

  // ScrollUp function
  function scrollUp(options) {
    if (document.body.dataset.scrollUp) {
      return;
    }

    // Set up default options
    const defaults = {
      scrollName: 'scrollUp',
      scrollDistance: 300,
      scrollFrom: 'top',
      scrollSpeed: 300,
      easingType: 'linear',
      animation: 'fade',
      animationSpeed: 200,
      scrollTrigger: false,
      scrollTarget: false,
      scrollText: '',
      scrollTitle: false,
      scrollImg: false,
      activeOverlay: false,
      zIndex: 2147483647
    };

    const settings = Object.assign({}, defaults, options);

    // Check if the scrollUp button exists
    if (document.body.dataset.scrollUp) return;

    // Mark that scrollUp is initialized
    document.body.dataset.scrollUp = 'true';

    let scrollElement;

    // Create scroll trigger element if it's not provided
    if (!settings.scrollTrigger) {
      scrollElement = document.createElement('a');
      scrollElement.id = settings.scrollName;
      scrollElement.href = '#top';
      scrollElement.style.display = 'none';
      scrollElement.style.position = 'fixed';
      scrollElement.style.zIndex = settings.zIndex;
      scrollElement.innerHTML = settings.scrollImg ? '' : settings.scrollText;
      if (settings.scrollTitle) scrollElement.title = settings.scrollTitle;
      document.body.appendChild(scrollElement);
    } else {
      scrollElement = document.querySelector(settings.scrollTrigger);
    }

    // Create active overlay if needed
    if (settings.activeOverlay) {
      const overlay = document.createElement('div');
      overlay.id = settings.scrollName + '-active';
      overlay.style.position = 'absolute';
      overlay.style.top = settings.scrollDistance + 'px';
      overlay.style.width = '100%';
      overlay.style.borderTop = '1px dotted ' + settings.activeOverlay;
      overlay.style.zIndex = settings.zIndex;
      document.body.appendChild(overlay);
    }

    let scrollHeightThreshold;

    if (settings.scrollFrom === 'top') {
      scrollHeightThreshold = settings.scrollDistance;
    } else {
      scrollHeightThreshold = document.documentElement.scrollHeight - window.innerHeight - settings.scrollDistance;
    }

    let isVisible = false;

    // Scroll event listener
    window.addEventListener('scroll', function () {
      if (window.scrollY > scrollHeightThreshold) {
        if (!isVisible) {
          if (settings.animation === 'fade') {
            fadeIn(scrollElement, settings.animationSpeed);
          } else if (settings.animation === 'slide') {
            slideDown(scrollElement, settings.animationSpeed);
          } else {
            scrollElement.style.display = 'block';
          }
          isVisible = true;
        }
      } else {
        if (isVisible) {
          if (settings.animation === 'fade') {
            fadeOut(scrollElement, settings.animationSpeed);
          } else if (settings.animation === 'slide') {
            slideUp(scrollElement, settings.animationSpeed);
          } else {
            scrollElement.style.display = 'none';
          }
          isVisible = false;
        }
      }
    });

    // Click event listener for scroll to top
    scrollElement.addEventListener('click', function (event) {
      event.preventDefault();

      const targetPosition = settings.scrollTarget
        ? (typeof settings.scrollTarget === 'number' ? settings.scrollTarget : document.querySelector(settings.scrollTarget).offsetTop)
        : 0;

      smoothScrollTo(targetPosition, settings.scrollSpeed);
    });

    // Helper functions
    function fadeIn(el, duration) {
      el.style.opacity = 0;
      el.style.display = 'block';
      let last = +new Date();
      const tick = function () {
        el.style.opacity = +el.style.opacity + (new Date() - last) / duration;
        last = +new Date();

        if (+el.style.opacity < 1) {
          (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
        }
      };
      tick();
    }

    function fadeOut(el, duration) {
      el.style.opacity = 1;
      let last = +new Date();
      const tick = function () {
        el.style.opacity = +el.style.opacity - (new Date() - last) / duration;
        last = +new Date();

        if (+el.style.opacity > 0) {
          (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
        } else {
          el.style.display = 'none';
        }
      };
      tick();
    }

    function slideDown(el, duration) {
      el.style.display = 'block';
      el.style.height = '0';
      let startHeight = 0;
      const targetHeight = el.scrollHeight;

      const startTime = performance.now();

      function animate() {
        const currentTime = performance.now();
        const elapsedTime = currentTime - startTime;
        const progress = Math.min(elapsedTime / duration, 1);
        const currentHeight = progress * targetHeight;

        el.style.height = currentHeight + 'px';

        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          el.style.height = '';
        }
      }

      requestAnimationFrame(animate);
    }

    function slideUp(el, duration) {
      const startHeight = el.scrollHeight;
      const startTime = performance.now();

      function animate() {
        const currentTime = performance.now();
        const elapsedTime = currentTime - startTime;
        const progress = Math.min(elapsedTime / duration, 1);
        const currentHeight = startHeight - progress * startHeight;

        el.style.height = currentHeight + 'px';

        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          el.style.display = 'none';
          el.style.height = '';
        }
      }

      requestAnimationFrame(animate);
    }

    function smoothScrollTo(targetPosition, duration) {
      const start = window.scrollY;
      const distance = targetPosition - start;
      const startTime = performance.now();

      function animateScroll() {
        const currentTime = performance.now();
        const elapsedTime = currentTime - startTime;
        const progress = Math.min(elapsedTime / duration, 1);
        const newPosition = start + distance * progress;

        window.scrollTo(0, newPosition);

        if (progress < 1) {
          requestAnimationFrame(animateScroll);
        }
      }

      requestAnimationFrame(animateScroll);
    }
  }

  // Initialize scrollUp with options
  window.scrollUp = scrollUp;
})();
